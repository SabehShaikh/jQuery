 All jQuery functions start with a $, usually referred to as a dollar sign operator, or as bling.

jQuery often selects an HTML element with a selector, then does something to that element.

For example, let's make all of your button elements bounce. Just add this code inside your document ready function:

$("button").addClass("animated bounce");

You can also target elements by their id attributes.

First target your button element with the id target3 by using the $("#target3") selector.

In the same way you can add classes to an element with jQuery's addClass() function, you can remove them with jQuery's removeClass() function.
 $("button").removeClass("btn-default");

jQuery has a function called .css() that allows you to change the CSS of an element.
 $('#target1').css("color" , "red")

jQuery has a function called .prop() that allows you to adjust the properties of elements.
    $("#target1").prop("disabled" , true)


jQuery has a function called .html() that lets you add HTML tags and text within an element. Any content previously within the element will be completely replaced with the content you provide using this function.
jQuery also has a similar function called .text() that only alters text without adding tags. In other words, this function will not evaluate any HTML tags passed to it, but will instead treat it as the text you want to replace the existing content wit

jQuery has a function called .remove() that will remove an HTML element entirely.
    $('#target4').remove()

Now let's try moving elements from one div to another.

jQuery has a function called appendTo() that allows you to select HTML elements and append them to another element.
  $('#target2').appendTo('#right-well')

jQuery has a function called clone() that makes a copy of an element.
Did you notice this involves sticking two jQuery functions together? This is called function chaining and it's a convenient way to get things done with jQuery.
   $('#target5').clone().appendTo('#left-well')

For example, the h3 element in your jQuery Playground has the parent element of <div class="container-fluid">, which itself has the parent element of body.

jQuery has a function called parent() that allows you to access the parent of whichever element you've selected.
 $('#target1').parent().css("background-color" , "red")

When HTML elements are placed one level below another they are called children of that element. For example, the button elements in this challenge with the text #target1, #target2, and #target3 are all children of the <div class="well" id="left-well"> element.

jQuery has a function called children() that allows you to access the children of whichever element you've selected.
$('#right-well').children().css("color" , "orange");

jQuery uses CSS Selectors to target elements. The target:nth-child(n) CSS selector allows you to select all the nth elements with the target class or element type.
  $('.well .target:nth-child(2)').addClass("animated bounce")

You can also target elements based on their positions using :odd or :even selectors.

Note that jQuery is zero-indexed which means the first element in a selection has a position of 0. This can be a little confusing as, counter-intuitively, :odd selects the second element (position 1), fourth element (position 3), and so on.
   $('.target:even').addClass("animated shake")


jQuery can target the body element as well.

Here's how we would make the entire body fade out: $("body").addClass("animated fadeOut");

$("body").addClass("animated hinge");

